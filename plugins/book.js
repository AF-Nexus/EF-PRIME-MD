import axios from "axios";
import config from '../config.cjs';

const bookCommand = async (m, gss) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(" ")[0].toLowerCase() : "";
  const args = m.body.slice(prefix.length + cmd.length).trim().split(" ");

  if (cmd === "book") {
    if (args.length === 0 || !args.join(" ")) {
      return m.reply("*Please provide text for the book cover.*");
    }

    const text = args.join(" ");
    const size = 30;
    
    await gss.sendMessage(m.from, { react: { text: "üìö", key: m.key } });

    try {
      const bookApiUrl = `https://apis.davidcyriltech.my.id/generate/book?text=${encodeURIComponent(text)}&size=${size}`;
      
      await gss.sendMessage(m.from, { 
        image: { url: bookApiUrl },
        caption: `üìö *Book Cover Generator* üìö\n\n` +
          `Title: ${text}\n\n` +
          `> Generated by EF-PRIME BOT`,
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363419090892208@newsletter',
            newsletterName: "EF-PRIME BOOK",
            serverMessageId: 144,
          },
        }
      }, { quoted: m });
      
      await gss.sendMessage(m.from, { react: { text: "‚úÖ", key: m.key } });
      
    } catch (error) {
      console.error("Book cover generation error:", error);
      await gss.sendMessage(m.from, { react: { text: "‚ùå", key: m.key } });
      m.reply("‚ùå An error occurred while generating the book cover. Please try again later.");
    }
  }
};

export default bookCommand;